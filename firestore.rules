rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to a specific company
    function userBelongsToCompany(companyId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    // Helper function to check user role
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isAtLeastAdmin() {
      return isUserRole('Admin') || isUserRole('Super Admin');
    }

    // Companies collection
    match /companies/{companyId} {
      allow read, write: if request.auth != null; // Simplified for now, should be tightened later
    }

    // Users collection
    match /users/{userId} {
      allow create: if request.auth != null; // Allow any authenticated user to create their own profile during signup
      allow read, update: if request.auth.uid == userId; // Users can only read/update their own profile
      allow delete: if false; // Nobody can delete user profiles
    }

    // Employees collection
    match /employees/{employeeId} {
      allow create: if request.auth != null && userBelongsToCompany(request.resource.data.companyId);
      allow read, update, delete: if request.auth != null && userBelongsToCompany(resource.data.companyId);
    }

    // Projects collection
    match /projects/{projectId} {
      allow create: if request.auth != null && userBelongsToCompany(request.resource.data.companyId);
      allow read, update, delete: if request.auth != null && userBelongsToCompany(resource.data.companyId);
    }
    
    // Clients collection
    match /clients/{clientId} {
      allow create: if request.auth != null && userBelongsToCompany(request.resource.data.companyId);
      allow read, update, delete: if request.auth != null && userBelongsToCompany(resource.data.companyId);
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
        allow read: if true; // Publicly readable for the token query
        allow create: if request.auth != null && isAtLeastAdmin() && userBelongsToCompany(request.resource.data.companyId);
        allow update: if request.auth != null; // Allow user to accept invitation
    }
    
    // Audit logs collection
    match /audit_logs/{logId} {
        allow create: if request.auth != null;
        allow read: if false; // Admins could be given read access later if needed
    }

    // Files collection - Matches any file in any subdirectory of 'files'
    match /files/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}
